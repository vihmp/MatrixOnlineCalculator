@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options
@using MatrixOnlineCalculator.Models.EquationsSystemsSolvers
@using MatrixOnlineCalculator.Models.Options
@using MatrixOnlineCalculator.Models
@using MatrixOnlineCalculator.Models.GaussianEliminationCalculation.ElementaryRowOperations

@model EquationsSystemSolverByCramerRule

@inject IOptions<MathFormatOptions> mathFormatOptions
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Решение системы уравнений"];
    int precision = mathFormatOptions.Value.DecimalPrecision;
    double epsilon = Math.Pow(0.1, precision);
}

<h1>@Localizer["Решение системы уравнений (метод Крамера)"]</h1>
<p><math><math-equation-system a="Model.A" b="Model.B" /></math></p>

<p>
    @if (MathUtils.AreEqual(Model.Determinants[0].Determinant, 0, epsilon))
    {
        @if (Model.Determinants
           .Skip(1)
           .Any(x => !MathUtils.AreEqual(x.Determinant, 0, epsilon)))
        {
            @Localizer["Нет решений."]
        }
        else
        {
            @Localizer["Бесконечное множество решений."]
        }
    }
    else
    {
        for (int i = 0; i < Model.X.Count; i++)
        {
            <math>
                <msub><mi>x</mi><mn>@(i + 1)</mn></msub>
                <mo>=</mo>
                <math-number value="Model.X[i]" precision="precision" />
            </math>@(i < Model.X.Count - 1 ? "," : ".")
        }
    }
</p>

<p>@Localizer["Подробное решение:"]</p>
<ol>
    @for (int i = 0; i < Model.Determinants.Count; i++)
    {
        var determinant = Model.Determinants[i];
        int rowSwitchingNumber = determinant.GaussianElimination.ElementaryRowOperations
                .OfType<RowSwitching>()
                .Count();

        <li>
            <p>
                <math>
                    <msub>
                        <mi>&Delta;</mi>
                        <mn>@i</mn>
                    </msub>
                    <mo>=</mo>
                    <mrow>
                        <mo>|</mo>
                        <math-matrix data="determinant.GaussianElimination.Initial" />
                        <mo>|</mo>
                    </mrow>
                </math>
            </p>
        </li>

        @await Html.PartialAsync("_GaussianElimination", determinant.GaussianElimination)

        <li>
            <p>
                @Localizer["Количество перестановок строк в матрице: {0}.", rowSwitchingNumber]

                @if ((rowSwitchingNumber % 2) == 0)
                {
                    @Localizer["Знак определителя не изменился."]
                }
                else
                {
                    @Localizer["Знак определителя изменился на противоположный."]
                }
            </p>
        </li>
        <li>
            <p>
                <math>
                    <msub>
                        <mi>&Delta;</mi>
                        <mn>@i</mn>
                    </msub>
                    <mo>=</mo>
                    <mrow>
                        @if ((rowSwitchingNumber % 2) != 0)
                        {
                            <mo>-</mo>
                        }
                        <mo>|</mo>
                        <math-matrix data="determinant.GaussianElimination.Result"
                                     precision="precision"/>
                        <mo>|</mo>
                    </mrow>
                    <mo>=</mo>
                    @if ((rowSwitchingNumber % 2) != 0)
                    {
                        <math-number value="-1"
                                     use-brackets="true" />
                        <mo>&sdot;</mo>
                    }
                    @for (int k = 0; k < determinant.GaussianElimination.Initial.RowCount; k++)
                    {
                        if (k > 0)
                        {
                            <mo>&sdot;</mo>
                        }
                        <math-number value="determinant.GaussianElimination.Result[k, k]"
                                     precision="precision"
                                     use-brackets="true" />
                    }
                    <mo>=</mo>
                    <math-number value="determinant.Determinant" precision="precision" />
                </math>
            </p>
        </li>
    }
    <li>
        @if (!MathUtils.AreEqual(Model.Determinants[0].Determinant, 0, epsilon))
        {
            @for (int i = 1; i < Model.Determinants.Count; i++)
            {
                <p>
                    <math>
                        <msub><mi>x</mi><mn>@i</mn></msub>
                        <mo>=</mo>
                        <mfrac>
                            <msub>
                                <mi>&Delta;</mi>
                                <mn>@i</mn>
                            </msub>
                            <msub>
                                <mi>&Delta;</mi>
                                <mn>0</mn>
                            </msub>
                        </mfrac>
                        <mo>=</mo>
                        <mfrac>
                            <math-number value="Model.Determinants[i].Determinant" precision="precision" />
                            <math-number value="Model.Determinants[0].Determinant" precision="precision" />
                        </mfrac>
                        <mo>=</mo>
                        <math-number value="Model.X[i - 1]" precision="precision" />
                    </math>
                </p>
            }
        }
    </li>
</ol>

@section Scripts
{
    <partial name="_GlobalizationScripts" />
}