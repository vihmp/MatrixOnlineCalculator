@model LaplaceExpansion
@inject IOptions<MathFormatOptions> mathFormatOptions
@{
    ViewData["Title"] = "Вычисление определителя матрицы";
    int precision = mathFormatOptions.Value.DecimalPrecision;
}

<h1>Вычисление определителя матрицы (теорема Лапласа)</h1>
<p>
    <math>
        <mrow>
            <mo>|</mo>
            <math-matrix data="Model.Matrix" />
            <mo>|</mo>
        </mrow>
        <mo>=</mo>
        <math-number value="Model.Determinant" precision="precision" />
    </math>
</p>

<p>Подробное решение:</p>
<ol>
    @{
        int index = 0;
        var steps = new Stack<(int ParentIndex, int Row, int Column, LaplaceExpansion Expansion)>();
        steps.Push((0, 0, 0, Model));

        while (steps.Count > 0)
        {
            var step = steps.Pop();
            index++;

            <li>
                @if (step.Expansion.Matrix.ColumnCount > 2)
                {
                    <p>
                        @if (step.ParentIndex > 0)
                        {
                            @: Вычислим значение минора
                            <math>
                                <msubsup>
                                    <mi>M</mi>
                                    <mrow>
                                        <mn>@step.Row</mn>
                                        <mo>,</mo>
                                        <mspace width="0.2em"></mspace>
                                        <mn>@step.Column</mn>
                                    </mrow>
                                    <mn>@step.ParentIndex</mn>
                                </msubsup>
                            </math>@: .
                        }
                        Найдем разложение определителя по первой строке матрицы:
                    </p>
                }

                <p>
                    <math>
                        @if (step.ParentIndex > 0)
                        {
                            <msubsup>
                                <mi>M</mi>
                                <mrow>
                                    <mn>@step.Row</mn>
                                    <mo>,</mo>
                                    <mspace width="0.2em"></mspace>
                                    <mn>@step.Column</mn>
                                </mrow>
                                <mn>@step.ParentIndex</mn>
                            </msubsup>
                            <mo>=</mo>
                        }

                        <mrow>
                            <mo>|</mo>
                            <math-matrix data="step.Expansion.Matrix" />
                            <mo>|</mo>
                        </mrow>
                        <mo>=</mo>

                        @if (step.Expansion.Matrix.ColumnCount > 2)
                        {
                            for (int j = 0; j < step.Expansion.Matrix.ColumnCount; j++)
                            {
                                if (j > 0)
                                {
                                    <mo>+</mo>
                                }

                                <msup>
                                    <mrow>
                                        <mo>(</mo>
                                        <mn>-1</mn>
                                        <mo>)</mo>
                                    </mrow>
                                    <mrow>
                                        <mn>1</mn>
                                        <mo>+</mo>
                                        <mn>@(j + 1)</mn>
                                    </mrow>
                                </msup>
                                <mo>&sdot;</mo>
                                <math-number value="step.Expansion.Matrix[0, j]" use-brackets="true" />
                                <mo>&sdot;</mo>
                                <msubsup>
                                    <mi>M</mi>
                                    <mrow>
                                        <mn>@step.Expansion.Minors[j].Row</mn>
                                        <mo>,</mo>
                                        <mspace width="0.2em"></mspace>
                                        <mn>@step.Expansion.Minors[j].Column</mn>
                                    </mrow>
                                    <mn>@index</mn>
                                </msubsup>
                            }

                            <mo>=</mo>
                        }
                        else
                        {
                            @for (int j = 0; j < step.Expansion.Matrix.ColumnCount; j++)
                            {
                                @if (j > 0)
                                {
                                    <mo>@(j % 2 == 0 ? "+" : "-")</mo>
                                }

                                <math-number value="step.Expansion.Matrix[0, j]" use-brackets="true" />
                                <mo>&sdot;</mo>
                                <math-number value="step.Expansion.Minors[j].Minor.Determinant"
                                             use-brackets="true"
                                             precision="precision" />
                            }
                            <mo>=</mo>
                            <math-number value="step.Expansion.Determinant" precision="precision" />
                        }
                    </math>
                </p>

                @if (step.Expansion.Matrix.ColumnCount > 2)
                {
                    <p>
                        <math>
                            <mo>=</mo>

                            @for (int j = 0; j < step.Expansion.Matrix.ColumnCount; j++)
                            {
                                @if (j > 0)
                                {
                                    <mo>@(j % 2 == 0 ? "+" : "-")</mo>
                                }

                                <math-number value="step.Expansion.Matrix[0, j]" use-brackets="true" />
                                <mo>&sdot;</mo>
                                <mrow>
                                    <mo>|</mo>
                                    <math-matrix data="step.Expansion.Minors[j].Minor.Matrix" />
                                    <mo>|</mo>
                                </mrow>
                            }
                            <mo>=</mo>
                        </math>
                    </p>
                    <p>
                        <math>
                            <mo>=</mo>

                            @for (int j = 0; j < step.Expansion.Matrix.ColumnCount; j++)
                            {
                                @if (j > 0)
                                {
                                    <mo>@(j % 2 == 0 ? "+" : "-")</mo>
                                }

                                <math-number value="step.Expansion.Matrix[0, j]" use-brackets="true" />
                                <mo>&sdot;</mo>
                                <math-number value="step.Expansion.Minors[j].Minor.Determinant"
                                             use-brackets="true"
                                             precision="precision" />
                            }
                            <mo>=</mo>
                            <math-number value="step.Expansion.Determinant"
                                         precision="precision" />
                        </math>
                    </p>

                    foreach (var substep in step.Expansion.Minors.AsEnumerable().Reverse())
                    {
                        steps.Push((index, substep.Row, substep.Column, substep.Minor));
                    }
                }
            </li>
        }
    }
</ol>

@section Scripts
{
    <partial name="_GlobalizationScripts" />
}